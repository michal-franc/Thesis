
\chapter{Testowanie i ocena efektywnoœci}
\section{Wybrane Testy Mechanizmów Zabezpieczeñ}
\subsection{Sprawdzenie mechanizmów szyfrowania wiadomoœci}
Do sprawdzenia zawartoœci przesy³anych wiadomoœci u¿yjê testowej aplikacji \textbf{(WcfTestClient)} pozwalaj¹cej wysy³aæ zapytania do us³ugi sieciowej. Aplikacja ta jest udostêpniana wraz z pakietem \textbf{Visual Studio}. 

\subsection{Sprawdzenie mechanizmu logowania oraz poziomów uprawnieñ}
Sprawdzenie dzialania logowania i blokad dostepu do aplikacji

\subsection{Zabezpieczenie przed atakami typu wstrzykiwanie skryptów}

W tym teœcie przetestujemy odpornoœæ aplikacji na próby wstrzykniêcia skryptów do pól tekstowych. Po wpisaniu skryptu aplikacja powinna zwróciæ b³¹d informuj¹cy o próbie przeprowadzenia takiego ataku.

\begin{center}
 \includegraphics{/Tests/scriptinject.jpg}
\end{center}

\begin{center}
	Rys. Atak poprzez wstrzykiwanie skryptów.
\end{center}

W tym przypadku serwer zwróci³ odpowiedni b³¹d informuj¹cy o próbie wstrzykniêcia skryptu. Zabezpieczenie to jest domyœlnym ustawieniem w frameworku \textbf{Asp.Net Mvc}. Dane zwracane z widoku przed przetworzeniem i wys³aniem do odpowiedniego kontrolera odpowiedzialnego za uaktualnienie danych w bazie s¹ sprawdzane w celu wykrycia potencjalnie niebezpiecznych skryptów. Istnieje mo¿liwoœæ jawnego wy³¹czenia tego zabezpieczenia. Opcja ta zosta³a u¿yta w przypadku edycji materia³ów nauczania oraz testów. Pola tekstowe w tym przypadku mo¿liwoœæ umieszczania fragmentów kodu , które zosta³yby zinterpretowane jako potencjalne zagro¿enie.\newline

\begin{center}
 \includegraphics{/Tests/scriptinject2.jpg}
\end{center}
\begin{center}
	Rys. Atak poprzez wstrzykiwanie skryptów wy³¹czony mechanizm.
\end{center}
\begin{center}
  \includegraphics{/Tests/sucessfullscriptinject.jpg}
\end{center}
\begin{center}
	Rys. Udany atak typu script inject.
\end{center}

W trakcie testów odkry³em , ¿e istnieje mo¿liwoœæ strzykniêcia skryptu , który  odpala³ siê po prze³adowaniu strony. W zaprezentowanym przyk³adzie wyœwietlany jest jedynie prosty alert z testow¹ informacj¹ , jednak¿e taka luka pozwala wrzucaæ najrozmaitsze skrypty pozwalaj¹ce wyrz¹dziæ spore szkody. Dobrym przyk³adem mo¿e byæ chocia¿by wstrzykniêcie keyloggera przechwytuj¹cego wszystkie znaki wprowadzane przez u¿ytkownika.\newline
Do oczyszczenia wprowadzanych danych stworzy³em prosty mechanizm oparty na wyra¿eniach regularnych. Standardowe rozwi¹zanie koduj¹ce odpowiednie znaki  by³o doœæ problematyczne poniewa¿ czêœæ wyœwietlanych wartoœci by³a dodatkowo przetwarzana po stronie klienta. Po wprowadzeniu poprawek serwer pozwala zapisaæ takie dane jednak¿e zabezpieczenie odpowiednio oczyszcza zapisywany tekst.

\newpage{}

\section{Testy wydajnoœci mechanizmów przetwarzania danych}
\newpage{}
\newpage{}
\newpage{}
\subsection{Wybrane testy funkcjonalne}
\subsubsection{Tworzenie materia³ów nauczania}
Scenariusz testowy obejmuje:
\begin{itemize}
	\item stworzenie nowego materia³u nauczania
	\item stworzenie parametrów opisowych
   \item stworzenie sekcji nauczania
\end{itemize}

\begin{table}[h]
\begin{tabular}{|r|c|l|}
  \hline
  Akcja  & Oczekiwany rezultat & Wynik \\
  \hline
  Przejœcie do panelu edycji & Wygenerowanie odpowiedniego widoku & OK\\
  \hline
  Dodanie materia³u nauczania & Wygenerowanie nowego materia³u w bazie danych & OK\\
  & Przejœcie do widoku edycji & OK\\
  \hline
  \hline
  Edycja pól opisowych & Uaktualnienie danych w bazie & OK\\
  & Wyœwietlenie alerta informuj¹cego o powodzeniu akcji & OK\\
  \hline
  \hline
  Dodawanie Sekcji nauczania& Dodanie sekcji w bazie& OK\\
  & Wyœwietlenie alerta informuj¹cego o powodzeniu akcji & OK\\
  \hline
  \hline
  Edytowanie Sekcji nauczania& Uaktualnienie sekcji w bazie e& OK\\
  & Wyœwietlenie alerta informuj¹cego o powodzeniu akcji & OK\\
  \hline
\end{tabular}
\caption{Testy funkcjonalne tworzenie materia³ów nauczania}
\end{table}


\subsubsection{Tworzenie testów}
Scenariusz testowy obejmuje:

\begin{itemize}
	\item stworzenie nowego testu
	\item stworzenie nowego pytania z odpowiedziami
\end{itemize}

\begin{table}[h]
\begin{tabular}{|r|c|l|}
  \hline
  Akcja  & Oczekiwany rezultat & Wynik \\
  \hline
  Przejœcie do panelu tworzenia testu & Wygenerowanie odpowiedniego widoku & OK\\
  \hline
  Dodanie Testu & Wygenerowanie nowego testu  & OK\\
  & Dodanie testu do bazy danych& OK\\
  & Przejœcie do widoku edycji & OK\\
  \hline
  \hline
  Dodanie nowego pytania & Wyœwietlenie okna modalnego  & \\
  &z formularzem edycji pytania& OK\\
  & Dodanie opisu oraz dodanie odpowiedzi & OK\\
  \hline
  Zatwierdzenie pytania & Dodanie pytania do bazy danych & OK\\
  \hline
\end{tabular}
\caption{Testy funkcjonalne tworzenie testu}
\end{table}


\subsubsection{Rozwi¹zywanie testów}
Scenariusz testowy obejmuje:
\begin{itemize}
	\item uruchomienie testu
	\item rozwi¹zanie testu
	\item sprawdzenie wyniku
\end{itemize}

\begin{table}[h]
\begin{tabular}{|r|c|l|}
  \hline
  Akcja  & Oczekiwany rezultat & Wynik \\
  \hline
  Przejœcie do panelu   & Pobranie danych z bazy danych& OK\\
  rozwi¹zywania testu &&\\
   &Wygenerowanie widoku& OK\\
  \hline
  Zatwierdzenie testu & Wyliczenie wyniku & OK\\
  & Dodanie rekordu do bazy danych& OK\\
  & Wygenerowanie widoku z wynikiem & OK\\
  \hline
\end{tabular}
\caption{Testy funkcjonalne rozwi¹zywania  testu}
\end{table}

\subsubsection{Tworzenie kursu}
Scenariusz testowy obejmuje:
\begin{itemize}
	\item Stworzenie kursu
\end{itemize}

\begin{table}[h]
\begin{tabular}{|r|c|l|}
  \hline
  Akcja  & Oczekiwany rezultat & Wynik \\
  \hline
  Przejœcie widoku tworzenia kurs&Wygenerowanie widoku z formularzem& OK\\
  \hline
  Zatwierdzenie danych& Stworzenie kursu w bazie danych & OK\\
  & Stworzenie grupy w bazie danych& OK\\
  & Stworzenie shoutboxa w bazie danych& OK\\
  & Dodanie aktualnego u¿ytkownika &\\
  & jako autora kursu& OK\\
  \hline
\end{tabular}
\caption{Testy funkcjonalne Tworzenie kursu}
\end{table}


\newpage{}
\subsection{Analiza oraz optymalizacja zapytañ generowanych przez NHibernate za pomoc¹ narzêdzia NHProf}
Nhibernate jest bardzo dobrym i popularnym mapperem obiektowo relacyjnym. Prócz samej biblioteki dostêpne s¹ ró¿ne narzêdzia pozwalaj¹ce analizowaæ dzia³anie frameworka. Jednym z takich narzêdzi jest \textbf{NHProf}. Produkt \textbf{Ayende Rahien-a} znanego bloggera oraz jednej z najbardziej aktywnych osób w zespole odpowiedzialnym za przeniesienie Hibernate-a z Javy na platformê .Net.\newline

Aplikacja ta jest niestety p³atna ale istnieje mo¿liwoœæ przetestowania , w ¿aden sposób nieograniczonej wersji aplikacji , w terminie do 30 dni.

\begin{center}
  \includegraphics[width=14cm]{/Tests/nhprof.jpg}
\end{center}
\begin{center}
	Rys. G³ówny widok aplikacji NHProf.
\end{center}

\textbf{NHprof} jest aplikacj¹ pozwalaj¹c¹ analizowaæ zapytania generowane poprzez framework \textbf{NHibernate}. Prócz mechanizmu przechwytywania zapytañ posiada œwietne narzêdzia analizuj¹ce dzia³anie \textbf{ORM-a}. Potrafi wykryæ najczêstsze problemy wynikaj¹ce z b³êdnej konfiguracji , b³êdnych mapowañ b¹dŸ b³êdnych mechanizmów przetwarzania.\newline

Korzystanie z tego narzêdzia jest stosunkowo proste. Wystarczy podczepiæ odpowiedni¹ bibliotekê i za inicjalizowaæ okreœlon¹ statyczn¹ klasê. \textbf{NHprof} korzysta z biblioteki \textbf{log4net} (alternatywna biblioteka upraszczaj¹ca mechanizmy logowania) i równie¿ nale¿y j¹ do³¹czyæ do projektu. W przypadku omawianych testów. Inicjalizacja mechanizmu profilowania jest uruchamiana w momencie startu us³ugi sieciowej.\newline


\textbf{NHProf} pozwala wyznaczyæ trzy istotne parametry , na których oprzemy ca³¹ analizê i proces optymalizacji. 

\begin{itemize}
	\item Czas zapytania - okreœla ca³kowity czas jaki jest potrzebny na wykonanie danej operacji.
	\item Iloœæ generowanych zapytañ - okreœla liczbê zapytañ potrzebnych do wykonania danej operacji. 
	\item Iloœæ pobieranych encji - okreœla iloœæ zwróconych obiektów 
\end{itemize}

\begin{center}
  \includegraphics[width=14cm]{/Tests/nhprofwynik.jpg}
\end{center}
\begin{center}
	Rys. Przyk³adowy widok prezentuj¹cy wynik profilowania.
\end{center}
\subsubsection{Pobieranie danych}
Przeanalizujmy proces pobierania pojedynczego obiektu typu Kurs.

\begin{table}[h]
\centering
\begin{tabular}{|r|l|}
	\hline
  Czas zapytania & 1.608s\\
  Iloœæ zapytañ & 75 \\
  Iloœæ encji & 100\\
  \hline
\end{tabular}
\caption{Pierwsza próba}
\end{table}

Pierwsza próba nie wygl¹da najlepiej. Po pierwsze pobierane jest ³¹cznie 100 encji. Jest to za du¿a liczba oznaczaj¹ca , ¿e podczas pobierania danych odwo³ujemy siê do wielu niepotrzebnych danych. Najprawdopodobniej jest to spowodowane nieoptymaln¹ konfiguracj¹ mapowañ oraz mechanizmów póŸnej inicjalizacji. Kolejnym  parametrem rzucaj¹cym siê w oczy jest iloœæ zapytañ. Idealnie powinno byæ generowane jedno zapytanie. W tym przypadku jednak mamy ich naprawdê sporo. Iloœæ generowanych zapytañ jest szczególnie wa¿na w przypadku skalowalnoœci aplikacji. Zbyt du¿a iloœæ zapytañ mo¿e bardzo szybko wyczerpaæ pulê dostêpnych po³¹czeñ. W tym przypadku tak du¿a liczba zapytañ najprawdopodobniej spowodowana jest niepotmyaln¹ implementacj¹ mechanizmu zarz¹dzania sesj¹. Czas potrzebny an wygenerowanie zapytañ jest wprost proporcjonalny do iloœci encji i zapytañ wobec tego równie¿ jest zbyt du¿y. \newline
\begin{table}[h]
\centering
\begin{tabular}{|r|l|}
	\hline
  Czas zapytania & 0.308s\\
  Iloœæ zapytañ & 8 \\
  Iloœæ encji & 25\\
  \hline
\end{tabular}
\caption{Po wprowdzeniu poprawek}
\end{table}


Proces wprowadzania poprawek warto zacz¹æ od analizy danych wymaganych  do generacji tego konkretnego widoku. Widok Kursu prezentuje dane na temat kursu oraz listê dostêpnych materia³ów nauczania. Dodatkowo wymaga pobrania encji grupy przynale¿¹cej do danego kursu by okreœliæ czy dany u¿ytkownik nale¿y do grupy. Po przeanalizowaniu generowanych zapytañ okaza³o siê , ¿e pobieram du¿o niepotrzebnych danych.  Poprawki objê³y m.in . Modyfikacje mapowañ oraz odpowiednie skonfigurowanie procesu póŸnej inicjalizacji.
\newpage{}

\subsubsection{Zapisywanie danych}

Analizê zapisu do bazy danych przeprowadzimy na obiekcie materia³ nauczania. Encja ta sk³ada siê z wielu parametrów opisowych. Scenariusz testowy przewiduje modyfikacje jednej sekcji nauczania i zapis zmian do bazy danych.
W tym przypadku nie otrzymamy parametru iloœci pobranych encji poniewa¿ jest to zapytanie , które nic nie zwraca z bazy danych.
Podobnie z parametrem iloœci zapytañ w tym przypadku bêdziemy analizowaæ iloœæ generowanych zapisów do bazy danych.
\begin{table}[h]
\centering
\begin{tabular}{|r|l|}
	\hline
  Czas operacji & 3.668s\\
  Iloœæ zapisów & 60 \\
  \hline
\end{tabular}
\caption{Pierwsza próba}
\end{table}

Próba wykaza³a , ¿e zarówno czas operacji jak i iloœæ zapytañ s¹ zbyt du¿e i nale¿y je poprawiæ tym bardziej , ¿e scenariusz testowy zak³ada³ modyfikacje tak naprawdê jednego wiersza tabeli. Jak widaæ coœ tu jest nie tak skoro wykonujemy a¿ 60 operacji zapisu. Po analizie logów generowanych przez aplikacjê \textbf{NHProf} okaza³o siê , ¿e podczas uaktualniania danych materia³u nauczania automatycznie wykonywane by³y operacje uaktualniania elementów z nim powi¹zanych. G³ówny problem by³ z testem nale¿¹cym do materia³u. Test posiada wiele pytañ i odpowiedzi. W pierwszej próbie dochodzi³o do aktualizacji ka¿dego pytania i odpowiedzi mimo tego , ¿e te dane nie by³y zmieniane. \newline


\begin{table}[h]
\centering
\begin{tabular}{|r|l|}
	\hline
  Czas operacji & 0.571s\\
  Iloœæ zapisów & 13 \\
  \hline
\end{tabular}
\caption{Po wprowadzeniu poprawek}
\end{table}

Po poprawie mapowañ oraz mechanizmu uaktualniania danych mo¿na zauwa¿yæ wyraŸn¹ poprawê zarówno w czasie potrzebnym na wykonanie operacji jak i iloœci generowanych zapytañ. Najwiêksz¹ zmian¹ by³o wy³¹czenie kaskadowego uaktualniania danych w przypadku testu powi¹zanego z uaktualnianym materia³em nauczania.
\subsection{Testy obci¹¿eniowe}

Zgodnie z projektem. Aplikacja powinna obs³u¿yæ co najmniej 100 u¿ytkowników jednoczeœnie w czasie nie wiêkszym ni¿ 1 sekunda. Testy obci¹¿eniowe zostan¹ wykonane wraz z u¿yciem darmowej aplikacji \textbf{WCAT} dostêpnej w pakiecie narzêdzi do serwera IIS.
Aplikacja ta w doœæ ³atwy sposób pozwala zasymulowaæ operacje wielu u¿ytkowników wykonuj¹c wiele zapytañ na raz do serwera. Konfiguracja przypadków testowych odbywa siê poprzez zdefiniowanie testów w trzech plikach tekstowych.

\subsubsection{script.txt}
Pozwala definiowaæ konkretne zapytania tzn. gdzie i jak wykonaæ zapytanie

\subsubsection{distribution.txt}
Pozwala definiowaæ niesymetryczne roz³o¿enie testów na ró¿ne strony np. jedna strona bêdzie ³adowana z czêœtoœæia 70% druga natomiast z 30%

\subsubsection{config.txt}
Pozwala ustaliæ opcje testów takie jak : Czas testu , czas oczekiwania na test , iloœæ symulowanych klientów , iloœæ symulowanych w¹tków itd.

\subsubsection{Ustawienia}

\begin{table}[h]
\centering
\begin{tabular}{|r|l|}
	\hline
Warmuptime & 5s \\
Duration & 60s \\
CooldownTime & 5s \\
NumClientMachines & 1 \\
NumClientThreads & 100\\
  \hline
\end{tabular}
\caption{Konfiguracja symulowanych u¿ytkowników}
\end{table}

Aplikacja zosta³a skonfigurowana tak by symulowaæ dzia³anie 100 u¿ytkowników na raz. Czas dzia³ania aplikacji ustawiony na 60s.
Dodatkowa analiza dzia³ania aplikacji zostanie przeprowadzona przez profiler \textbf{ANTS Performance Profiler} firmy RedGate. Narzêdzie to pozwala monitorowaæ wykorzystywane zasoby oraz szczegó³owo przeanalizowaæ jakie metody zosta³y wywo³ane.

\subsubsection{Scenariusz testowy}

Scenariusz testowy zak³ada wys³anie zapytania w formie komendy \textbf{GET} do serwera \textbf{IIS}. Zapytanie bêdzie odwo³ywa³o siê do widoku wyœwietlaj¹cego wszystkie kursy. By móc wykonaæ ten test zosta³y wy³¹czone wszelkie zabezpieczenia aplikacji by daæ dostêp symulowanym u¿ytkownikom testowym.

\subsubsection{Przeprowadzenie testu}

\begin{table}[h]
\centering
\begin{tabular}{|r|l|}
	\hline
Minimalny & 3.120s \\
Œredni & 3.773s \\
Maksymalny & 5.600s \\
  \hline
\end{tabular}
\caption{Œrednie Czasy odpowiedzi}
\end{table}
Wyniki nie spe³niaj¹ za³o¿eñ. Czasy odpowiedzi s¹ zbyt du¿e. Nale¿y podj¹æ próbê poprawy tego stanu.

\begin{center}
 \includegraphics[width=14cm]{/Tests/antsprofiler.jpg}
\end{center}

\begin{center}
	Rys. Wynik programu profiluj¹cego
\end{center}

Po analizie logów programu profiluj¹cego mo¿emy zauwa¿yæ , ¿e wiêkszoœæ czasu u¿ytkownik poœwiêca oczekuj¹c na dane z bazy danych.
 
Bardzo du¿o czasu marnowane jest na wykorzystywanie mechanizmów biblioteki \textbf{Ninject} do wstrzykiwania zale¿noœci. Biblioteka ta pozwala odseparowaæ inicjalizacjê odpowiednich klas, w tym przypadku klas obs³uguj¹cych us³ugi, do innej warstwy. Dziêki temu nie trzeba w w wielu miejscach kodu inicjalizowaæ obiektów.\newline

\textbf{Ninject} pozwala definiowaæ zasiêg tworzenia obiektów. W powy¿szym przypadku gdzie widaæ jak du¿o czasu poœwiêcamy na tworzenie obiektów by³a ustawiona opcja tworzenia nowej instancji klasy dla ka¿dego ¿¹dania  tzn. ka¿dy zapytanie do serwera generowane przez symulowanego klienta powodowa³o tworzenie nowej instancji klasy us³ug kursów. \textbf{Ninject} opiera inicjalizacjê obiektów na kosztownych mechanizmach. Po zastosowaniu opcji tworzenia jednej globalnej instancji klasy poziom wykorzystania biblioteki znacznie zmala³.

\begin{center}
 \includegraphics[width=14cm]{/Tests/antsprofilerpoprawka.jpg}
\end{center}

\begin{center}
	Rys. Wynik programu profiluj¹cego
\end{center}

\begin{table}[h]
\centering
\begin{tabular}{|r|l|}
	\hline
Minimalny & 3.120s \\
Œredni & 3.773s \\
Maksymalny & 5.600s \\
  \hline
\end{tabular}
\caption{Œrednie Czasy odpowiedzi}
\end{table}

Analiza czasów odpowiedzi pokaza³a , ¿e nie tu tkwi problem i nale¿y zoptymalizowaæ dzia³anie aplikacji po stronie serwera z dostêpem do bazy danych wystawionym za us³ugami sieciowymi.\newline

Analiza narzêdziem \textbf{NHProf} wykaza³a , ¿e niezoptymalizowane operacje na bazie danych wymagaj¹ 200 milisekund czasu do pobrania danych. NHProf wykaza³ , ¿e wykonujemy za du¿o zapytañ do bazy pobieraj¹c niepotrzebne dane. Dodatkowo uruchomimy cache drugiego poziomu.


\begin{table}[h]
\centering
\begin{tabular}{|c|c|c|c}
	\hline
	& Przed & Poprawki mapowañ & Cache\\
\hline
Iloœæ encji & 36 &20 &0\\
Iloœæ zapytañ & 21&5 &0 \\
Czas zapytania & 200ms&18ms &13ms \\
  \hline
\end{tabular}
\caption{Operacje na bazie danych}
\end{table}

Po wprowadzeniu poprawek w mapowañ widaæ poprawê w czasie dostêpu do bazy danych/

\begin{table}[h]
\centering
\begin{tabular}{|r|l|}
	\hline
Minimalny & 2.300s \\
Œredni & 3.007s \\
Maksymalny & 4.600s \\
  \hline
\end{tabular}
\caption{Œrednie Czasy odpowiedzi}
\end{table}

Nadal jednak nie jest to zadowalaj¹cy wynik. Po przeprowadzeniu analizy tego co siê dzieje po stronie serwera okaza³o siê , ¿e ponad 50 procent czasu wywo³ywania us³ug jest poœwiecane na generowanie raportów dla profilera NHibernate po wy³aczeniu profilera.

\begin{table}[h]
\centering
\begin{tabular}{|r|l|}
	\hline
Minimalny & 1.014s \\
Œredni & 1.198s \\
Maksymalny & 1.701s \\
  \hline
\end{tabular}
\caption{Œrednie Czasy odpowiedzi}
\end{table}

Widaæ teraz , ¿e Profile NHibernate-a dodawa³ praktycznie 2 sekundy czasu odpowiedzi. Bardzo wa¿ne jest by go wy³¹czyæ na serwerze produkcyjnym.

Profiler aplikacji wykaza³ , ¿e po stronie klienta 90 procent czasu poœwiecamy na generowanie zapytania i oczekiwanie odpowiedzi od us³ugi sieciowej. W zwi¹zku z tym pozost¹³a nam jeszcez jedna opcja , która mozliwe ze poprawi czasy odpowiedzi. Mianowicie cachowanie zapytan do uslug sieciowych. Zapytanie poniewaz jest zwykla wiadomoscia protokolu HTTP moze byc cachowane normalnymi mechanizmy jakimi cachujemy np generowanie stron.

Ustawimy cachowanie uslugi pobierajacecj liste kursow tak by wygasalo po 60 sekundach.  

\begin{table}[h]
\centering
\begin{tabular}{|r|l|}
	\hline
Minimalny & 405ms \\
Œredni & 455ms \\
Maksymalny & 656ms \\
  \hline
\end{tabular}
\caption{Œrednie Czasy odpowiedzi}
\end{table}

W³¹czenie cachowania zapytañ WCF-owych przynios³o ca³kiem spory zysk czasowy. 

Procedura profilowania oraz poprawiania generacji tego konkretnego widoku by³a bardzo owocna. Z pocz¹tkoweog czasu generowania równego 3 s zrobi³o siê nie ca³e 0.5 s.

\newpage{}
\subsection{Badanie czasu odpowiedzi us³ug sieciowych}
\newpage{}
\subsection{Testy konfiguracji roz³o¿enia us³ug sieciowych}
\newpage{}
\newpage{}
\section{Wnioski z testów i badañ}
\newpage{}

\chapter{Podsumowanie}
\newpage{}
\newpage{}
